defaults: &defaults
  working_directory: ~/code
  docker:
  - image: circleci/android:api-28-alpha
  environment:
    JVM_OPTS: -Xmx3200m
  parallelism: 1

version: 2
jobs:
  "Dependencies":
    <<: *defaults
    steps:
    - checkout
    - restore_cache:
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
    - run:
        name: Chmod permissions
        command: sudo chmod +x ./gradlew
    - run:
        name: Download Dependencies
        command: ./gradlew androidDependencies
    - save_cache:
        paths:
        - ~/.gradle
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
    - persist_to_workspace:
        root: ~/code
        paths:
        - ./*
  "Lint":
    <<: *defaults
    steps:
    - attach_workspace:
        at: ~/code
    - restore_cache:
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
    - run:
        name: Run Lint
        command: ./gradlew clean lint
    - store_artifacts:
        path: app/build/reports
        destination: reports
  "Unit_tests":
    <<: *defaults
    steps:
    - attach_workspace:
        at: ~/code
    - restore_cache:
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
    - run:
        name: Run Unit Tests
        command: ./gradlew clean test
    - store_test_results:
        path: app/build/test-results
  "Make_build":
    <<: *defaults
    steps:
    - attach_workspace:
        at: ~/code
    - restore_cache:
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
    - run:
        name: Build
        command: ./gradlew clean assembleRelease
    - store_artifacts:
        path: app/build/outputs/apk/
        destination: release
    - persist_to_workspace:
        root: ~/code
        paths:
        - ./*
  "Fabric_prop":
    <<: *defaults
    steps:
    - attach_workspace:
        at: ~/code/app
    - run:
        name: Generate Fabric Properties
        command: echo -e "apiSecret=${FABRIC_SECRET}\napiKey=${FABRIC_KEY}" >> ~/code/app/fabric.properties
    - persist_to_workspace:
        root: ~/code
        paths:
          - app/fabric.properties
  "Fabric_deploy":
    <<: *defaults
    working_directory: ~/code
    steps:
    - attach_workspace:
        at: ~/code
    - restore_cache:
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
    - deploy:
        name: Deploy Fabric
        command: ./gradlew crashlyticsUploadDistributionRelease
  "Deploy AppCenter":
    <<: *defaults
    working_directory: ~/code
    steps:
      - attach_workspace:
          at: ~/code
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - deploy:
          name: Deploy AppCenter
          command: ./gradlew -Pdeploy=true deployAppCenter
  "ktlint_download":
      <<: *defaults
      steps:
        - attach_workspace:
            at: ~/code
        - run:
            name: Download ktlint
            command: curl -sSLO https://github.com/shyiko/ktlint/releases/download/0.29.0/ktlint && chmod a+x ktlint
        - persist_to_workspace:
            root: ~/code
            paths:
              - ./ktlint
  "ktlint":
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/code
      - run:
          name: Create report dirs
          command: mkdir -p app/build/reports
      - run:
          name: Run Kotlin Linter
          command: |
              ./ktlint --relative --android --reporter=plain "app/**/*.kt" 2>&1 | tee app/build/reports/ktlint-results.txt || echo Finished
      - store_artifacts:
          path: app/build/reports
          destination: reports
workflows:
  version: 2
  build:
    jobs:
      - "Dependencies"
      - "ktlint_download"
      - "Fabric_prop":
          filters:
            branches:
              only: master
      - "ktlint":
          requires:
            - "ktlint_download"
            - "Dependencies"
      - "Unit_tests":
          requires:
            - "Dependencies"
      - "Lint":
          requires:
            - "Dependencies"
      - "Make_build":
          requires:
            - "Lint"
            - "ktlint"
            - "Unit_tests"
      - "Fabric_deploy":
          requires:
            - "Make_build"
            - "Fabric_prop"
          filters:
            branches:
              only: master
      - "Deploy AppCenter":
          requires:
            - "Make_build"
          filters:
            branches:
              only:
                - master
                - dev